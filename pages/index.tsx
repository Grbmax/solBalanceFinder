import Head from 'next/head'
import { Inter } from 'next/font/google'
import AddressForm from '@components/components/AddressForm'
import { useState } from 'react'
import * as web3 from '@solana/web3.js'
import { AccountLayout, TOKEN_PROGRAM_ID } from '@solana/spl-token'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [balance, setBalance] = useState(0)
  const [address, setAddress] = useState('')
  const [executable, setExecutable] = useState(false)

  const addressSubmittedHandler = (address: string) => {
    try {
      setAddress(address)
      const key = new web3.PublicKey(address)
      const connection = new web3.Connection(web3.clusterApiUrl('devnet'))
      connection.getBalance(key).then(balance => {
        setBalance(balance / web3.LAMPORTS_PER_SOL)
      })
      connection.getAccountInfo(key).then(accountInfo => {
        if (accountInfo) {
          console.log(accountInfo)
          setExecutable(accountInfo.executable)
        }
      })
    } catch (error) {
      setAddress('')
      setBalance(0)
      alert(error)
    }
  }

  const handleAirdrop = async () => {
    try {
      const pubKey = new web3.PublicKey(address)
      if (pubKey) {
        console.log("Public Key: ", pubKey.toString());
        const connection = new web3.Connection(web3.clusterApiUrl('devnet'))
        const balance = await connection.getBalance(pubKey);
        console.log("Balance: ", balance / web3.LAMPORTS_PER_SOL);
        const signature = await connection.requestAirdrop(
          pubKey,
          1 * web3.LAMPORTS_PER_SOL);
        const latestBlockhash = await connection.getLatestBlockhash();
        const airdrop = await connection.confirmTransaction({
          blockhash: latestBlockhash.blockhash,
          lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
          signature: signature
        });
        if (airdrop) {
          alert("Airdrop Successful");
          const newBalance = await connection.getBalance(pubKey);
          console.log("New Balance: ", newBalance / web3.LAMPORTS_PER_SOL);
        }
      }
    }
    catch (error) {
      setAddress('')
      setBalance(0)
      alert(error)
    }
  }

  const handleViewTokens = async () => {
    try {
      const connection = new web3.Connection(web3.clusterApiUrl('devnet'));
      const tokenAccounts = await connection.getTokenAccountsByOwner(
        new web3.PublicKey(address),
        {
          programId: TOKEN_PROGRAM_ID
        },
      );
      console.log("Token                                         Balance");
      console.log("------------------------------------------------------------");
      tokenAccounts.value.forEach((tokenAccount) => {
        const accountData = AccountLayout.decode(tokenAccount.account.data);
        console.log(`${new web3.PublicKey(accountData.mint)}   ${accountData.amount}`);
      });
    } catch (error) {
      setAddress('')
      setBalance(0)
      alert(error)
    }
  }


  return (
    <>
      <Head>
        <title>Sol Finder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='flex flex-col items-center justify-center 
    min-h-screen bg-gradient-to-bl from-white via-black to-black text-white'>
        <AddressForm handler={addressSubmittedHandler} airdropHandler={function (address: string): void {
          throw new Error('Function not implemented.')
        }} />
        <div className='h-18'>
          <p>Address : {address}</p>
          <p>Balance : {balance}</p>
          <p>Executable : {executable ? 'Yes' : 'No'}</p>
        </div>
        {address ?
          <div>
            <button className="border-2 px-4 mx-2 mt-4 bg-violet-600
            rounded-full border-violet-500" type="submit" onClick={handleAirdrop}>Airdrop SOL</button>
            <button className="border-2 mx-2 px-4 bg-violet-600
            rounded-full border-violet-500" type="submit" onClick={handleViewTokens}>View Tokens</button>
          </div>
          : null
        }
      </div>
    </>
  )

}
